#!/usr/bin/env ruby
require 'optparse'
require 'etc'


@parser = OptionParser.new do |opts|
    opts.on('-b', '--baseline BASELINE', 'baseline test run') do |arg|
        @baseline_test = arg
    end
    opts.on('-t', '--testrun TESTRUN(s)', Array, 'array of test runs') do |arg|
        @testruns = arg
    end
    opts.on('-d', '--details TEST DETAILS(id=value)', Array, 'key, value pair of testdetails') do |arg|
        @details = arg
    end
    opts.on('-p', '--tolerance TOLERANCE PCT(s)', Float, 'tolerance pct') do |arg|
        @tolerancepct = arg
    end
end
@parser.parse!


def username
    Etc.getlogin
end


def get_perf_metrics_as_hash(trun)
    perf_csv_file = ENV['NS_WDIR'] + '/logs/TR' + trun + '/perf.csv'
    scenario = ENV['NS_WDIR'] + '/logs/TR' + trun + '/scenario'
    perf_metric_hash = {}
    
    keywords = File.open(scenario).read 
    
    match = keywords.match /TNAME ([\w-]+)/
    
    perf_metric_hash['Case ID'] = match[1]
    perf_metric_hash['TR'] = trun.to_i
    
    if File.exists? perf_csv_file
        File.open(perf_csv_file).each do|row|
            metric, avg, min, max = row.chomp.split(',')
            # In memory replacement of data
            metric.gsub!('(NA)', '')
            perf_metric_hash[metric] = avg.to_f
        end
    end
    perf_metric_hash
end

def gen_html_start_tag
    html = %{
<!DOCTYPE html>
<html>
  <head>
    <style type='text/css'>
      body{
        font-size: 1em;
        color: #333;
	margin:0px;
        padding: 0px;
      }
     
      table{ 
        border-collapse: collapse; 
        width: 95%; 
      }
      
      table, th, td {
        border: 1px solid #D8D8D8; 
        padding: 5px; 
      }
      
      th { 
        background-color: #F5F5F5; 
        color: #333; 
        text-align:left; 
      }
      
      tr td:first-child { 
        background-color: #FAFAFA; 
        #background-color: #FFF; 
        font-weight: bold; 
      }
     
      .highlight{
        background-color: #fbe9e7;
        color: #333;
      } 
      .baseline{
        background-color: #e8f5e9;
        color: #333;
      } 
      .regular{
        background-color: #FFFEF9;
        color: #333;
      }
      .disclaimer{
        color: #757575; 
        font-size: .8em;
      }
      .signature{
        color: #4242;
        font-size: .9em;
      }
    </style>
  </head>
  <body>}

end


def gen_welcome_msg
    welcome_table = %{
    <table>
      <tr>
        <th>Generated by</th>
        <th>Tolerance(Pct)</th>
        <th>Date</th>
        <th>Time</th>
      </tr>
      <tr>
        <td>#{username}</td>
        <td>#{@tolerancepct} %</td>
        <td>#{Time.now.strftime('%d/%m/%Y')}</td>
        <td>#{Time.now.strftime('%I:%M:%S %p')}</td>
      </tr>
    </table>
    }
    %{
    <table style='border: 0px solid #FFF !important'>
      <tr style='border: 0px; !important'>
        <td style='width:65%; font-weight: normal; background-color: #FFF; border: 0px !important; vertical-align: text-top'>
          <h2 style='font-size: 1.68rem; color: #616161; font-weight: 300;'>Report for: NetDiagnostics Enterprise Performance</h2>
        </td>
        <td style='width:35%; border: 0px !important;'>#{welcome_table}</td>
      </tr>
    </table>
    }
end
def gen_html_end_tag
    html = %{
  </body>
</html>
}

end

def main
    baseline_hash = get_perf_metrics_as_hash(@baseline_test)
    testrecords ||= []

    @testruns.each do |testrun|
        trun_folder = ENV['NS_WDIR'] + '/logs/TR' + testrun 
        testrun_hash = get_perf_metrics_as_hash(testrun)
        testrecords << testrun_hash
    end

    process(baseline_hash, testrecords)
end

def generate_table_row(row_data)
    %{<tr>
        #{row_data}
      </tr>}
end

def generate_table_column(record, tag, clazz)
    td = ""
    if clazz 
        td = %{<#{tag} class='#{clazz}'>#{record}</#{tag}>}
    else
        td = %{<#{tag}>#{record}</#{tag}>}
    end

    td
end

def generate_table(thead, tbody)
    %{
    <table>
      <caption><b>Performance Test Results</b></caption>
      #{thead}
      #{tbody}
    </table>}
end


def generate_test_desc_table
    table = %{
    <table>
      <caption><b>Test Objective</b></caption>
      <tr>
        <th>Test ID</th><th>Description</th>
      </tr>
    }
    @details.each_with_index do |detail, index|
        testid, desc = detail.split(':')
        tr = %{
        <tr>
          <td>#{testid}</td><td>#{desc}</td>
        </tr>
        }
        table += tr
    end
    table += %{
    </table>
    }
end


def generate_legend_table
    %{
    <table>
      <caption><b>Legends</b></caption>
      <tr>
        <th>S.No</th><th>Color Code</th><th>Description</th>
      </tr>
      <tr>
        <td>1</td><td class='baseline'></td><td>Baseline performance test columns</td>
      </tr>
      <tr>
        <td>2</td><td class='regular'></td><td>Normal performance test columns</td>
       </tr>
      <tr>
        <td>3</td><td class='highlight'></td><td>Columns deviating from baseline for more than #{@tolerancepct} pct</td>
      </tr>
    </table>
}
end


def generate_combined_table
    %{
    <table style='border: 0px !important'>
      <tr style='border: 0px !important'>
        <td style='width:60%; font-weight: normal; background-color: #FFF; border: 0px !important'>#{generate_test_desc_table}</td>
        <td style='width:40%; vertical-align: text-top; border: 0px !important'>#{generate_legend_table}</td>
      </tr>
    </table>
    }
end


def generate_signature_and_disclaimer
    %{
    <p class='signature'>Automation Team,<br/>
    Cavisson Systems Inc</p>
    #{br(3)}
    <p class='disclaimer'>Please do not reply to this mail as this is an automated mail service.<br>
    For any queries email to <a href='mailto: dl-qa-auto@cavisson.com'>dl-qa-auto@cavisson.com</a>
    </p>
    }
end

def process(baseline_hash, testrecords)
    row = ""
    baseline_hash.each_key do |header|
        row += generate_table_column(header, 'th', nil)
    end
    thead = generate_table_row(row)

    row = ""
    baseline_hash.each_value do |value|
        row += generate_table_column(value, 'td', 'baseline')
    end

    tbody = generate_table_row(row)
    
    testrecords.each do |test_hash|
        row = ''
        test_hash.each do|metric, value|
            avg_b = baseline_hash[metric]
            avg_c = value
            tolerance = (avg_b * (@tolerancepct/100))
            if avg_c > (avg_b + tolerance) 
                row += generate_table_column(avg_c, 'td', 'highlight')
            else
                row += generate_table_column(avg_c, 'td', 'regular')
            end
        end
        tbody += %{
      #{generate_table_row(row)}}
    end
    html = gen_html_start_tag + \
           gen_welcome_msg + \
           br(2) + \
           generate_table(thead, tbody) + \
           br(2) + \
           generate_combined_table + \
           br(2) + \
           generate_signature_and_disclaimer + \
           gen_html_end_tag
end


def br(n)
    br_tag = ""
    n.times do || 
        br_tag += %{
     <br/>}
    end
    br_tag
end

if __FILE__ == $0
    unless @baseline_test || @testruns
        puts @parser.help
        exit 
    end
    unless @tolerancepct
        @tolerancepct = 5.0
    end
    puts main
end
