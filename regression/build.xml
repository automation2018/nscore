<?xml version="1.0"?>

<!--Task: Declaring project name-->
<project name="core-regresion" basedir="." default="run">
    
    <!-- Task: File to declare all build variable values-->
    <property file="build.properties"/>
    
    <!-- Task: Delete already exists file in test scenario directories locations--> 
    <target name="delete.if.exists" description="Delete already exists file in test scenario directories locations">  
        <delete includeemptydirs="true" verbose="false" if="${(directory::exists(directory))}">
            <fileset basedir="${directory}">  
                <include name="**/*.*" />  
            </fileset> 
        </delete>
    </target> 
    
    <!-- Task: Delete test scenario directories-->    
    <target name="clean" 
            description="cleans workbench files such as script, scenarios, testsuites, testcases and libraries">
        <delete dir="${scripts.dir}" failonerror="false"/>
        <delete dir="${scenarios.dir}" failonerror="false"/>
        <delete dir="${testcases.dir}" failonerror="false"/>
        <delete dir="${testsuites.dir}" failonerror="false"/>
    </target>     

    <!-- Task: Copy test scenario directory structure and modifies the modes-->
    <target name="copy" 
            depends="clean" 
            description="copies and prepares workbench files such as script, scenarios, testsuites, testcases and libraries">
        <copy todir="${scripts.dir}">
            <fileset dir="scripts"/>
        </copy>
        <copy todir="${scenarios.dir}">
            <fileset dir="scenarios"/>
        </copy>
        <copy todir="${testcases.dir}">
            <fileset dir="testcases"/>
        </copy>
        <copy todir="${testsuites.dir}">
            <fileset dir="testsuites"/>
        </copy>
        <copy todir="${lib.dir}">
            <fileset dir="../lib"/>
        </copy>
        <chmod perm="755">
            <fileset dir="${testcases.dir}">
                <include name="**/*_test_*"/> 
                <include name="**/check_status"/>
            </fileset>
        </chmod> 
    </target>

    <!-- Task: Copy hpd.conf file to modify hpd configuration for regression suite-->
    <target name="copy-hpd-file" depends="copy" description="Copy hpd.conf file to modify hpd configuration for regression suite">
        <scp file="${hpd.conf.ns}" 
             todir="${remote.user}@${remote.host}:${hpd.conf.no}"
             password="${remote.password}"
             trust="true"/>
    </target>
   
    <!-- Task: Restart and checks the status of hpd/NO server--> 
    <target name="hpd-process-restart" depends="copy-hpd-file" description="Restart and checks the status of hpd/NO server">
        <sshexec host="${remote.host}" 
                 username="${remote.user}"
                 password="${remote.password}"
                 command="${command.hpd.restart}"
                 trust="true"/>
        <sleep seconds="50"/>
        <sshexec host="${remote.host}"
                 username="${remote.user}"
                 password="${remote.password}"
                 command="${command.hpd.show}"
                 trust="true" 
                 outputproperty="hpd.process"/>
        <fail message="HPD is not running please see hpd_error.log first" unless="hpd.process"/>
    </target>

    <!-- Task: Starts execution of regression testsuite.-->
    <target name="regression" depends="hpd-process-restart" description="Starts execution of regression testsuite">
        <exec executable="/bin/bash" outputproperty="start.time">
            <arg value="-c"/>
            <arg value="date +'%d/%m/%y %I:%M:%S %p'"/>
        </exec>
        
        <echo message="start time = ${start.time}"/>

        <exec executable="/bin/bash" taskname="info">
            <arg value="run_ts.sh"/>
            <arg value="Regression"/>
            <arg value="0"/>
        </exec>
    </target>

    <!-- Task: To debug perticular test execution and changes-->
    <target name="debug" depends="hpd-process-restart" description="To debug perticular test execution and changes">
         <exec executable="/bin/bash" taskname="info">
            <arg value="run_ts.sh"/>
            <arg value="Regression"/>
            <arg value="0"/>
         </exec>
     </target>
    
      <target name="debug-without-HPD" depends="copy"  description="To debug perticular test execution and changes">
          <exec executable="/bin/bash" taskname="info">
            <arg value="run_ts.sh"/>
            <arg value="Regression"/>
            <arg value="0"/>
         </exec>
     </target>


    
    <!-- Task: Update mail.properties prior to Test Start Mail Send--> 
    <target name="update-welcome-properties"
            description="Update mail.properties prior to automation starts">
        <exec executable="/bin/bash" taskname="info">
            <arg value="update_mail_presetup"/>
        </exec>
    </target>

    <!-- Task: Send regression automation start mail-->
    <target name="trigger-welcome-mail" 
            depends="update-welcome-properties" 
            description="Send regression automation start mail">
        <property file="mail.properties"/>
        <mail mailhost="websrv.cavisson.com" 
              user="${mail.user}"
              password="${mail.password}" 
	      enableStartTLS="true"
              mailport="587"
              tolist="${configured.mail.list.to}" 
              cclist="${configured.mail.list.cc}"
              messageMimeType="text/html"
              subject="[UBUNTU16]Regression: NSCore ${curr.release} B${curr.build} - Started"
              messagefile="${startup.mail.file}"
              failonerror="false">
	    <from address="automation@cavisson.com"/>
        </mail>
    </target>

   <!-- Task: Update mail.properties prior to automation result mail Send--> 
    <target name="update-results-properties" 
           description="Update mail.properties prior to automation result mail Send">
        <exec executable="/bin/bash" taskname="info">
            <arg value="update_mail_results"/>
            <arg value="${start.time}"/>
        </exec>
    </target>
   
   <!-- Task: Send regression automation results with attachments-->
    <target name="trigger-result-mail" 
           depends="update-results-properties" 
           description="Send regression automation results with attachments"> 
       <property file="mail.properties"/>
       <mail mailhost="websrv.cavisson.com"
             user="${mail.user}"
             files="/home/automation/workbench/automation/nscore/logs/percentile_data.csv"
             password="${mail.password}" 
	     enableStartTLS="true"
             mailport="587" 
             tolist="${configured.mail.list.to}"
             cclist="${configured.mail.list.cc}"
             messageMimeType="text/html" 
             subject="[UBUNTU16]Regression: NSCore ${curr.release} B${curr.build} - ${buil.status.header}"
             messagefile="${mail.result.file}"
             failonerror="false">
           <from address="automation@cavisson.com"/>   		   
       </mail>	       
   </target>
  
   <!-- Task: Declaring default target to initiate build--> 
   <target name="run" depends="regression, trigger-result-mail" description="Declaring default target to initiate build">
   </target>
   <!--Task : Declaring default target to initiate debug build process without HPD start-->
   <target name="reg-debug-without-HPD-restart" depends="debug-without-HPD" description="Declaring default target to initiate debug build process without HPD start">
   </target>

   <!-- Task: Declaring default target to initiate debug build process--> 
   <target name="reg-debug" depends="debug" description="Declaring default target to initiate debug build process">
   </target>
   
   <!-- Task: test--> 
   <target name="test" depends="trigger-result-mail" description="To test">
   </target>
   
</project>
