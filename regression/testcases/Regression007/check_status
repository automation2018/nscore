#!/usr/bin/env bash

source $NS_WDIR/lib/automation_util


PROGRESS_REPORT_FILE="$NS_WDIR/logs/TR$T_RUN_ID/progress.report"
SUMMARY_GDF_FILE="$NS_WDIR/logs/TR$T_RUN_ID/summary_gdf.data"
MONITOR_LOG_FILE="$NS_WDIR/logs/TR$T_RUN_ID/monitor.log"
GLOBAL_DAT_FILE="$NS_WDIR/logs/TR$T_RUN_ID/global.dat"
RTC_ALL_LOG_FILE="$NS_WDIR/logs/TR$T_RUN_ID/runtime_changes/runtime_changes_all.log"
CONF_FILE="$NS_WDIR/logs/TR$T_RUN_ID/scenario"


function main(){
    case $(get_tname) in
        "REG-007-001") handle_reg_001_case ;;
        "REG-007-002") handle_reg_002_case ;;
        "REG-007-003") handle_reg_003_case ;;
        "REG-007-004") handle_reg_004_case ;;
        "REG-007-005") handle_reg_005_case ;;
        "REG-007-006") handle_reg_006_case ;;
        *) handle_unknown_case ;;
        ?) handle_unknown_case ;;
    esac
}


function get_status_rtc_phasewise(){
    phase=$1
    RTC_FLAG=0
   
    if [ -f $PROGRESS_REPORT_FILE ]; then 
	start_line=$(grep -n "$phase" $PROGRESS_REPORT_FILE | cut -d : -f1 | head -1) 
	end_line=$(grep -n "$phase" $PROGRESS_REPORT_FILE | cut -d : -f1 | tail -1)
	vusers_count=$(sed -n "${start_line},${end_line}p" $PROGRESS_REPORT_FILE | egrep -o "[0-9]+.[0-9]+" | head -2 | tail -1 | cut -d. -f1)
	rtc_vusers=$(sed -n "${start_line},${end_line}p" $PROGRESS_REPORT_FILE | egrep -o "[0-9]+.[0-9]+" | cut -d. -f1 | sort -n | head -1)
	conf_users=$(cat $CONF_FILE | grep "^SGRP" | cut -d " " -f7 | awk '{ sum+=$1} END {print sum}')
	ramp_down_users=$(grep "RAMPDOWN DONE" $PROGRESS_REPORT_FILE | cut -d ' ' -f3)
	rtc_string=$(grep "RTC_PHASE_0" $PROGRESS_REPORT_FILE)

        debug_log "start_line=$start_line;end_line=$end_line"	
	debug_log "VUSER_COUNT=$vusers_count;RTC_STRING=${rtc_string};rtc_vusers=$rtc_vusers;conf_users=$conf_users"
	debug_log "ramp_down_users=$ramp_down_users;(conf+rtc)users=$((conf_users + vusers_count))"
	
	if [ $vusers_count -ge 10 ] && \
           [ $vusers_count -le 110 ] && \
	   [ $ramp_down_users -le $((conf_users + vusers_count)) ] && \
	   [ ! -z "${rtc_string}" ]; then
	    return $RTC_FLAG
	else
	    RTC_FLAG=1
	    return $RTC_FLAG
	fi
    else
        RTC_FLAG=2
	return $RTC_FLAG
    fi
}


function get_vuser(){
    phase=$1
    startl=$(grep -n "$phase" $PROGRESS_REPORT_FILE | cut -d : -f1 | head -1) 
    endl=$(grep -n "$phase" $PROGRESS_REPORT_FILE | cut -d : -f1 | tail -1)
    avg_vuser=$(cat $PROGRESS_REPORT_FILE | sed -n "${startl},${endl}p" | grep "Vusers:" | egrep -o "[0-9]+.[0-9]+" | cut -d. -f1 | sort -n | tail -1)
            
    debug_log "avg_vuser=$avg_vuser;startl=$startl;endl=$endl"
    echo $avg_vuser
}


function get_avg_vuser_string() {
    avg_vuser=""
    
    debug_log "before loop iterates avg_vuser=$avg_vuser"

    for i in "$@"; do
        if [ "$i" == "RampUp0" ]; then
            avg_vuser+=$(get_vuser $i),
        elif [ "$i" == "Stabilize0" ]; then
            avg_vuser+=$(get_vuser $i),
        elif [ "$i" == "Duration0" ]; then
            avg_vuser+=$(get_vuser $i),
        else 
            avg_vuser+=$(get_vuser $i)
        fi
        
        debug_log "after loop iterates for $i avg_vuser=$avg_vuser"
    done

    echo $avg_vuser
}


function handle_reg_001_case(){
    get_status_rtc_phasewise Start0
   
    RTC_FLAG=$?
    
    if [ $RTC_FLAG -eq 0 ]; then 
        log_status_and_exit_ex "PASS" "RTC is being applied for $phase phase;$vusers_count  have been found in current situation as RTC being applied"
    elif [ $RTC_FLAG -eq 1 ]; then
        log_status_and_exit_ex "FAIL" "expected count  increased users at $phase phase was 10;actual user count is $vusers_count"
    else
        log_status_and_exit_ex "FAIL" "RTC testcase for increase user at $phase phase has been failed due to url or NS failure"
    fi
}


function handle_reg_002_case(){
    get_status_rtc_phasewise RampUp0
   
    RTC_FLAG=$?
    
    if [ $RTC_FLAG -eq 0 ]; then 
        log_status_and_exit_ex "PASS" "RTC is being applied for $phase phase;$vusers_count  have been found in current situation as RTC being applied"
    elif [ $RTC_FLAG -eq 1 ]; then
        log_status_and_exit_ex "FAIL" "expected count  increased users at $phase phase was more than 10;actual user count is $vusers_count"
    else
        log_status_and_exit_ex "FAIL" "RTC testcase for increase user at $phase phase has been failed due to url or NS failure"
    fi
}


function handle_reg_003_case(){
    get_status_rtc_phasewise Stabilize0
   
    RTC_FLAG=$?
    
    if [ $RTC_FLAG -eq 0 ]; then 
        log_status_and_exit_ex "PASS" "RTC is being applied for $phase phase;$vusers_count  have been found in current situation as RTC being applied"
    elif [ $RTC_FLAG -eq 1 ]; then
        log_status_and_exit_ex "FAIL" "expected count  increased users at $phase phase was more than 10;actual user count is $vusers_count"
    else
        log_status_and_exit_ex "FAIL" "RTC testcase for increase user at $phase phase has been failed due to url or NS failure"
    fi
}


function handle_reg_004_case(){
    get_status_rtc_phasewise Duration0
   
    RTC_FLAG=$?
    
    if [ $RTC_FLAG -eq 0 ]; then 
        log_status_and_exit_ex "PASS" "RTC is being applied for $phase phase;$vusers_count  have been found in current situation as RTC being applied"
    elif [ $RTC_FLAG -eq 1 ]; then
        log_status_and_exit_ex "FAIL" "expected count  increased users at $phase phase was more than 10;actual user count is $vusers_count"
    else
        log_status_and_exit_ex "FAIL" "RTC testcase for increase user at $phase phase has been failed due to url or NS failure"
    fi
}


function handle_reg_005_case(){
    get_status_rtc_phasewise RampDown0
   
    RTC_FLAG=$?
    
    if [ $RTC_FLAG -eq 0 ]; then 
        log_status_and_exit_ex "PASS" "RTC is being applied for $phase phase;$vusers_count  have been found in current situation as RTC being applied"
    elif [ $RTC_FLAG -eq 1 ]; then
        log_status_and_exit_ex "FAIL" "expected count  increased users at $phase phase was more than 10;actual user count is $vusers_count"
    else
        log_status_and_exit_ex "FAIL" "RTC testcase for increase user at $phase phase has been failed due to url or NS failure"
    fi
}


function handle_reg_006_case(){
    get_avg_vuser_string RampUp0 Stabilize0 Duration0 RampDown0
    debug_log "avg_vuser=${avg_vuser}"

    rampup_vuser=$(echo ${avg_vuser} | cut -d, -f1)
    stabilize_vuser=$(echo ${avg_vuser} | cut -d, -f2)
    duration_vuser=$(echo ${avg_vuser} | cut -d, -f3)
    rampdown_vuser=$(echo ${avg_vuser} | cut -d, -f4)
    
    #Validations of NVM distributions
    
    ramp_down_users=$(grep "RAMPDOWN DONE" $PROGRESS_REPORT_FILE | cut -d ' ' -f3)
    debug_log "ramp_down_users=$ramp_down_users"
    
    rtc_phase_string_count=$(egrep "RTC_PHASE_[0-9]" $PROGRESS_REPORT_FILE | wc -l)
    debug_log "rtc_phase_string_count=$rtc_phase_string_count"
    
    if [ $ramp_down_users -eq 300 ] && \
       [ $rtc_phase_string_count -eq 4 ] && \
       [ $rampup_vuser -ge 212 ] && \
       [ $stabilize_vuser -ge 192 ] && \
       [ $duration_vuser -ge 202 ] && \
       [ $rampdown_vuser -ge 209 ];then
        log_status_and_exit_ex "PASS" "rtc test where rtc being applied in rampup;stabilize;duration & rampdown phases"
    else
        log_status_and_exit_ex "FAIL" "rtc test where rtc being applied in rampup;stabilize;duration&rampdown phases failed"
    fi
}


main


exit 0
