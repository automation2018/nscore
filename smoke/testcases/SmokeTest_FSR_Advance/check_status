#!/usr/bin/env bash 
# Generated by: needle
#    Date Time: 11/28/16 07:32:26 AM
#  Description: Check status to validate cases for smoke
# 
# Conventions
#   1. Two(2) space indentation. No tabs
#   2. Variables and function starts with snake_case
#		3. Constants are declared with ALL_CAPS

# Source out required files
# set -x
source $NS_WDIR/lib/automation_util

# Default Constants
PATH_TO_TEST_RUN="$NS_WDIR/logs/TR$(get_testidx)"
#PARTITION_PATH="${PATH_TO_TEST_RUN}/$(get_test_partition)"
PROGRESS_REPORT_FILE="${PATH_TO_TEST_RUN}/progress.report"
SUMMARY_GDF_FILE="${PATH_TO_TEST_RUN}/summary_gdf.data"
#EVENT_LOG_FILE="${PARTITION_PATH}/event.log"
#MONITOR_LOG_FILE="${PARTITION_PATH}/monitor.log"
GLOBAL_DAT_FILE="${PATH_TO_TEST_RUN}/global.dat"
# Entry point to check status
# Add cases to handle your validation
function main() {
	case $(get_tname) in
    "SMOKE-056-001") handle_fsr_advance_1_case ;;
    "SMOKE-056-002") handle_fsr_advance_2_case ;;
# End case def
		*) handle_unknown_case ;;
		?) handle_unknown_case ;;
  esac
}

# Helper function to log status
# Sets additional product id and
# category id

function handle_unknown_case() {
	log_status_and_exit_ex "FAIL" "Testcase name not found"
}

function handle_fsr_advance_1_case() {
    handle_all_cases
}


function handle_fsr_advance_2_case() {
    handle_all_cases
}

function get_expected_num_of_steps(){
    target_sequence="$1"
    if [ $(echo ${target_sequence}|cut -d ' ' -f 6) == "IMMEDIATELY" ];then
        steps=1
    elif [ $(echo ${target_sequence}|cut -d ' ' -f 6) == "TIME_SESSIONS" ];then
        num_of_seconds=$(echo $(echo $target_sequence|cut -d ' ' -f 7) | awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }')
        if [ $(echo ${target_sequence}|cut -d ' ' -f 8) -eq 0 ];then
            if [ $num_of_seconds -le 60 ];then
                steps=2
            else
                steps=$((${num_of_seconds}/60))
            fi
        elif [ $(echo ${target_sequence}|cut -d ' ' -f 8) -eq 1 ];then
            steps=$((${num_of_seconds}/$(echo ${target_sequence}|cut -d ' ' -f 9)))
        elif [ $(echo ${target_sequence}|cut -d ' ' -f 8) -eq 2 ];then
            steps=$(echo ${target_sequence}|cut -d ' ' -f 9)
        fi
    fi
    echo $steps
}

function handle_all_cases(){
    rs=3
    IFS=$'\n'
    for line in $(grep 'SCHEDULE ' ${PATH_TO_TEST_RUN}/scenario);do
        if [ $(echo $line|cut -d ' ' -f 4) = 'RAMP_UP' ];then
            echo "Ramp up line: $line"
            expected_steps=$(get_expected_num_of_steps $line)
            if [ $(echo $line|cut -d ' ' -f 6) == 'IMMEDIATELY' ];then
                ramp_up_steps=1
                ramp_up_phase=$(echo $line|cut -d ' ' -f 3)
            elif [ $(echo $line|cut -d ' ' -f 6) == 'TIME_SESSIONS' ];then
                for ramp_up_phase in $(echo $line|cut -d ' ' -f 3);do
                    first_line=$(grep -n "'$ramp_up_phase' " $PROGRESS_REPORT_FILE|head -1 |cut -d ':' -f 1)
                    last_line=$(grep -n "'$ramp_up_phase' " $PROGRESS_REPORT_FILE|tail -1 |cut -d ':' -f 1)
                    ramp_up_steps=$(($(head -${last_line} $PROGRESS_REPORT_FILE|tail -$(($last_line-$first_line))|grep -c "RAMPING UP")+1))
                done
            fi
            echo "Rampup steps in $ramp_up_phase:$ramp_up_steps"
            echo "Ramp up steps expected: $expected_steps"
            if [ $expected_steps -ne $ramp_up_steps ];then
                echo "FAILED"
                log_status_and_exit_ex "FAIL" "FSR Advance -- Test case failed because ramp up steps for $ramp_up_phase was not as expected"
            fi
        fi
        if [ $(echo $line|cut -d ' ' -f 4) = 'RAMP_DOWN' ];then
            echo "Ramp down line: $line"
            expected_steps=$(get_expected_num_of_steps $line)
            if [ $(echo $line|cut -d ' ' -f 6) == 'IMMEDIATELY' ];then
                ramp_down_steps=1
            elif [ $(echo $line|cut -d ' ' -f 6) == 'TIME_SESSIONS' ];then
                for ramp_down_phase in $(echo $line|cut -d ' ' -f 3);do
                    first_line=$(grep -n "'$ramp_down_phase' " $PROGRESS_REPORT_FILE|head -1 |cut -d ':' -f 1)
                    last_line=$(grep -n "'$ramp_down_phase' " $PROGRESS_REPORT_FILE|tail -1 |cut -d ':' -f 1)
                    ramp_down_steps=$(($(head -${last_line} $PROGRESS_REPORT_FILE|tail -$(($last_line-$first_line))|grep -c "RAMPING DOWN")+1))
                done
            fi

            echo "Ramp Down steps in $ramp_down_phase : $ramp_down_steps"
            echo "ramp down steps expected: $expected_steps"
            if [ $expected_steps -ne $ramp_down_steps ];then
                log_status_and_exit_ex "FAIL" "FSR Advance -- Test case failed because ramp down steps for $ramp_down_phase was not as expected"
                 echo "FAILED"
            fi
        fi

        phase_name=$(echo $line|cut -d ' ' -f 3)
        phase_start_timing=$(grep "$phase_name " $GLOBAL_DAT_FILE | cut -d ' ' -f 4| head -1)
        schedule=("${schedule[@]}" "$phase_start_timing")
        phase_end_timing=$(grep "$phase_name " $GLOBAL_DAT_FILE | cut -d ' ' -f 4| tail -1)
        schedule=("${schedule[@]}" "$phase_end_timing")
        echo "Phase begin,end time of $phase_name is $phase_start_timing, $phase_end_timing"
    done

    echo "schedule found: ${schedule[@]}"

    scheduler_op=$(python /home/automation/workbench/automation/nscore/smoke/testcases/SmokeTest_FSR_Advance/phase_scheduler.py ${PATH_TO_TEST_RUN}/scenario)
    IFS=" " read -r -a timings <<< $scheduler_op
    echo "schedule expected: ${timings[@]}"
    echo "length of timings: ${#timings[@]}"
    for((i=0;i<${#timings[@]};i++)){
        echo "schedule expected ${timings[i]}"
    }
   
    for((i=0;i<${#timings[@]};i++)){
        echo "schedule expected ${timings[i]}, schedule found ${schedule[i]}"
        if [ ${timings[i]} != ${schedule[i]} ];then
            found_timing_in_sec=$(echo ${schedule[i]} | awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }')
            expected_timing_in_sec=$(echo ${timings[i]} | awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }')
            diff=$(($found_timing_in_sec-$expected_timing_in_sec))
            diff_pct=$(($diff*100/$expected_timing_in_sec))
            echo "%age diff found: $diff_pct"
            if [ $diff_pct -gt 50 ] || [ $diff_pct -lt -50 ];then
                rs=1
            fi
        elif [ $rs -ne 1 ];then
            rs=0
        fi
    }
    if [ $rs -eq 0 ];then
        log_status_and_exit_ex "PASS" "FSR Advance scheduling testcase passed"
    else
        log_status_and_exit_ex "FAIL" "FSR Advance scheduling testcase failed because phase timings obtained are not as expected"
    fi

}
# TODO: 
# 1. Add logic to validate case FSR_Advance_1
# 2. Depending upon evaluation update the status with your own description

# Call to main function
# Do not override it
main
