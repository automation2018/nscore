#!/usr/bin/env bash
# Generated by: needle
#    Date Time: 11/16/16 03:57:34 PM
#  Description: Check status to validate cases for smoke
# 
# Conventions
#   1. Two(2) space indentation. No tabs
#   2. Variables and function starts with snake_case
#		3. Constants are declared with ALL_CAPS

# Source out required files

source $NS_WDIR/lib/automation_util
# Default Constants
#PATH_TO_TEST_RUN="$NS_WDIR/logs/TR$(get_test_idx)"
#PARTITION_PATH="${PATH_TO_TEST_RUN}/$(get_test_partition)"
#PROGRESS_REPORT_FILE="${PATH_TO_TEST_RUN}/progress.report"
#SUMMARY_GDF_FILE="${PATH_TO_TEST_RUN}/summary_gdf.data"
#EVENT_LOG_FILE="${PARTITION_PATH}/event.log"
#MONITOR_LOG_FILE="${PARTITION_PATH}/monitor.log"

# Entry point to check status
# Add cases to handle your validation
function main() {
	case $(get_tname) in
    "SMOKE-049-001") handle_smoke_nvm_001_case ;;
    "SMOKE-049-002") handle_smoke_nvm_002_case ;;
    "SMOKE-049-003") handle_smoke_nvm_003_case ;;
    "SMOKE-049-004") handle_smoke_nvm_004_case ;;
    "SMOKE-049-005") handle_smoke_nvm_005_case ;;
    "SMOKE-049-006") handle_smoke_nvm_006_case ;;
    "SMOKE-049-007") handle_smoke_nvm_007_case ;;
    "SMOKE-049-008") handle_smoke_nvm_008_case ;;
    "SMOKE-049-009") handle_smoke_nvm_009_case ;;
# End case def
		*) handle_unknown_case ;;
		?) handle_unknown_case ;;
  esac
}

# Helper function to log status
# Sets additional product id and
# category id

function handle_unknown_case() {
    log_status_and_exit_ex "FAIL" "testcase not found"
}

# TODO: 
# 1. Add logic to validate case SMOKE-NVM_001
# 2. Depending upon evaluation update the status with your own description

#scenario_type : 0 -- Refers to FCU -- Filter will be applied on Users
#scenario_type : 1 -- Refers to FSR -- Filter will be applied on Sessionrate/Min

############  FCU Mode testcases  ##############

function handle_smoke_nvm_001_case() {
    filter="Users\="
    scenario_type=0

    # Calling method to estimate nvm distribution w.r.t users
    check_nvm_and_user $filter $scenario_type

    #Obtaining output of function to declare test case status
    output=$?
    debug_log "return status after applying check on nvm and users is $output"
    if [ $output -eq 1 ];then
        log_status_and_exit_ex "FAIL" "NVM Distribution in FCU - Test case for number of nvm lesser than number of users failed because number of nvm started are not equal to as expected"
    elif [ $output -eq 2 ];then
        log_status_and_exit_ex "FAIL" "NVM Distribution in FCU - Test case for number of nvm lesser than number of users failed because number of users allotted to the nvms is not as expected"
    elif [ $output -eq 0 ];then
        log_status_and_exit_ex "PASS" "NVM Distribution in FCU - Test case for number of nvm lesser than number of users passed."
    fi
}


function handle_smoke_nvm_002_case(){
    filter="Users\="
    scenario_type=0

    # Calling method to estimate nvm distribution w.r.t users
    check_nvm_and_user $filter $scenario_type

    #Obtaining output of function to declare test case status
    output=$?
    debug_log "return status after applying check on nvm and users is $output"
    if [ $output -eq 1 ];then
        log_status_and_exit_ex "FAIL" "NVM Distribution in FCU - Test case for number of nvm equal to number of users failed because number of nvm started are not equal to as expected"
    elif [ $output -eq 2 ];then
        log_status_and_exit_ex "FAIL" "NVM Distribution in FCU - Test case for number of nvm equal to number of users failed because number of users allotted to the nvms is not as expected"
    elif [ $output -eq 0 ];then
        log_status_and_exit_ex "PASS" "NVM Distribution in FCU - Test case for number of nvm equal to number of users passed."
    fi

}

function handle_smoke_nvm_003_case(){
    filter="Users\="
    scenario_type=0
    
    # Calling method to estimate nvm distribution w.r.t users
    check_nvm_and_user $filter $scenario_type

    #Obtaining output of function to declare test case status
    output=$?
    debug_log "return status after applying check on nvm and users is $output"
    if [ $output -eq 1 ];then
        log_status_and_exit_ex "FAIL" "NVM Distribution in FCU - Test case for number of nvm greater than number of users failed because number of nvm started are not equal to as expected"
    elif [ $output -eq 2 ];then
        log_status_and_exit_ex "FAIL" "NVM Distribution in FCU - Test case for number of nvm greater than number of users failed because number of users allotted to the nvms is not as expected"
    elif [ $output -eq 0 ];then
        log_status_and_exit_ex "PASS" "NVM Distribution in FCU - Test case for number of nvm greater than number of users passed."
    fi

}


#############  FSR mode testcases  #############

function handle_smoke_nvm_004_case(){
    filter="SessionRate\/Min\="
    scenario_type=1

    # Calling method to estimate nvm distribution w.r.t sessions
    check_nvm_and_user $filter $scenario_type

    #Obtaining output of function to declare test case status
    output=$?
    debug_log "return status after applying check on nvm and users is $output"
    if [ $output -eq 1 ];then
        log_status_and_exit_ex "FAIL" "NVM Distribution in FSR - Test case for number of nvm lesser than number of sessions failed because number of nvm started are not equal to as expected"
    elif [ $output -eq 2 ];then
        log_status_and_exit_ex "FAIL" "NVM Distribution in FSR - Test case for number of nvm lesser than number of users failed because number of users allotted to the nvms is not as expected"
    elif [ $output -eq 0 ];then
        log_status_and_exit_ex "PASS" "NVM Distribution in FSR - Test case for number of nvm lesser than number of users passed."
    fi
}

function handle_smoke_nvm_005_case(){
    filter="SessionRate\/Min\="
    scenario_type=1

    # Calling method to estimate nvm distribution w.r.t sessions
    check_nvm_and_user $filter $scenario_type

    #Obtaining output of function to declare test case status
    output=$?
    debug_log "return status after applying check on nvm and users is $output"
    if [ $output -eq 1 ];then
        log_status_and_exit_ex "FAIL" "NVM Distribution in FSR - Test case for number of nvm equal to number of sessions failed because number of nvm started are not equal to as expected"
    elif [ $output -eq 2 ];then
        log_status_and_exit_ex "FAIL" "NVM Distribution in FSR - Test case for number of nvm equal to number of sessions failed because number of sessions allotted to the nvms is not as expected"
    elif [ $output -eq 0 ];then
        log_status_and_exit_ex "PASS" "NVM Distribution in FSR - Test case for number of nvm equal to number of sessions passed."
    fi
}

function handle_smoke_nvm_006_case(){
    filter="SessionRate\/Min\="
    scenario_type=1

    # Calling method to estimate nvm distribution w.r.t sessions
    check_nvm_and_user $filter $scenario_type

    #Obtaining output of function to declare test case status
    output=$?
    debug_log "return status after applying check on nvm and users is $output"
    if [ $output -eq 1 ];then
        log_status_and_exit_ex "FAIL" "NVM Distribution in FSR - Test case for number of nvm greater than number of sessions failed because number of nvm started are not equal to as expected"
    elif [ $output -eq 2 ];then
        log_status_and_exit_ex "FAIL" "NVM Distribution in FSR - Test case for number of nvm greater than number of sessions failed because number of sessions allotted to the nvms is not as expected"
    elif [ $output -eq 0 ];then
        log_status_and_exit_ex "PASS" "NVM Distribution in FSR - Test case for number of nvm greater than number of sessions passed."
    fi

}

#############  PCT Mode testcases  ################

function handle_smoke_nvm_007_case(){
  
    #TEST_RUN_REPORT="${NS_WDIR}/logs/tsr/$(TEST_CYCLE_NUM)/${TSR_NUM}/logs/$(get_iteration_name)/test_run.report"
    TEST_RUN_REPORT="${NS_WDIR}/logs/tsr/${TEST_CYCLE_NUM}/${TSR_NUM}/logs/$(get_testcase_name)/test_run.report"
 
    
    #Obtain the number of nvm expected and started in test and compare them to check if expected number of nvms are started. 
    nvm_to_start=$(cut -d ',' -f 18 ${NS_WDIR}/logs/tsr/${TEST_CYCLE_NUM}/${TSR_NUM}/SmokeTest_NVM_Distribution_results.csv |tail -1)
    echo $nvm_to_start  
    nvm_count=$(($(grep 'NVM' $TEST_RUN_REPORT|tail -n +2| wc -l)/2))
    echo $nvm_count
    if [ $nvm_to_start -ne $nvm_count ];then
        log_status_and_exit_ex "FAIL" "NVM Distribution in PCT mode - Test case failed because number of nvm started are not equal to expected count"
    fi


    #Obtain  total number of users and number of users to be allotted to group 1 and group 2
    total_users=$(cut -d ',' -f 23 $NS_WDIR/logs/tsr/${TEST_CYCLE_NUM}/${TSR_NUM}/SmokeTest_NVM_Distribution_results.csv|tail -1|cut -d ' ' -f 2)
    grp1_users_pct=$(cut -d ',' -f 5 $NS_WDIR/logs/tsr/${TEST_CYCLE_NUM}/${TSR_NUM}/SmokeTest_NVM_Distribution_results.csv | tail -1)
    grp1_users_expected=$(printf '%d\n' "$(echo "$grp1_users_pct*$total_users/100" | bc)")
    grp2_users_pct=$(cut -d ',' -f 20 $NS_WDIR/logs/tsr/${TEST_CYCLE_NUM}/${TSR_NUM}/SmokeTest_NVM_Distribution_results.csv|tail -1| cut -d ' ' -f 8)
    grp2_users_expected=$(printf '%d\n' "$(echo "$grp2_users_pct*$total_users/100" | bc)")

    echo "$grp1_users_expected , $grp2_users_expected"

    
    #Obtain number of users allotted to group 1 and group 2 during test
    #grp1_users_found=$(egrep "NVM" $NS_WDIR/logs/tsr/$(TEST_CYCLE_NUM)/${TSR_NUM}/logs/$(get_iteration_name)/test_run.report|cut -d ',' -f 1|tail -n +2|head -${nvm_count}|sed "s/Users\=//"|awk '{print $2}'|awk '{ sum += $1 } END { print sum }')
    grp1_users_found=$(egrep "NVM" $NS_WDIR/logs/tsr/${TEST_CYCLE_NUM}/${TSR_NUM}/logs/$(get_testcase_name)/test_run.report|cut -d ',' -f 1|tail -n +2|head -${nvm_count}|sed "s/Users\=//"|awk '{print $2}'|awk '{ sum += $1 } END { print sum }')
    echo " grp 1 found: $grp1_users_found"

#    grp2_users_found=$(egrep "NVM" $NS_WDIR/logs/tsr/$(TEST_CYCLE_NUM)/${TSR_NUM}/logs/$(get_iteration_name)/test_run.report|cut -d ',' -f 1|tail -${nvm_count}|sed "s/Users\=//"|awk '{print $2}'|awk '{ sum += $1 } END { print sum }')
    grp2_users_found=$(egrep "NVM" $NS_WDIR/logs/tsr/${TEST_CYCLE_NUM}/${TSR_NUM}/logs/$(get_testcase_name)/test_run.report|cut -d ',' -f 1|tail -${nvm_count}|sed "s/Users\=//"|awk '{print $2}'|awk '{ sum += $1 } END { print sum }')
    echo " grp 2 found: $grp2_users_found"

    
    # Compare to check if each group has got users as expected.
    if [ $grp1_users_expected -ne $grp1_users_found ];then
        log_status_and_exit_ex "FAIL" "NVM Distribution in PCT mode - Test case failed because number of users alloted to group 1 donot satisfy percentage given."
    fi

    if [ $grp2_users_expected -ne $grp2_users_found ];then
        log_status_and_exit_ex "FAIL" "NVM Distribution in PCT mode - Test case failed because number of users alloted to group 2 donot satisfy percentage given."
    fi

    
    # Call method to get expected number of user to be allotted to each nvm.
    assigner $nvm_count $total_users

    
    # Obtain number of users allotted to each nvm during test and compare with the expected count.
    for((i=0; i<$nvm_count; i++)){
        compare_output=0
        #dist_per_nvm_found[$i]=$(egrep "NVM${i}" $NS_WDIR/logs/tsr/$(TEST_CYCLE_NUM)/${TSR_NUM}/logs/$(get_iteration_name)/test_run.report|cut -d ',' -f 1|head -$nvm_count|sed "s/Users\=//"|awk '{print $2}'|awk '{ sum += $1 } END { print sum }')
        dist_per_nvm_found[$i]=$(egrep "NVM${i}" $NS_WDIR/logs/tsr/${TEST_CYCLE_NUM}/${TSR_NUM}/logs/$(get_testcase_name)/test_run.report|cut -d ',' -f 1|head -$nvm_count|sed "s/Users\=//"|awk '{print $2}'|awk '{ sum += $1 } END { print sum }')
        echo "Users found with nvm$i are ${dist_per_nvm_found[i]}"
        echo "Users expected with nvm $i are ${dist_per_nvm_expected[i]}" 
        if [ $(bc -l <<< "${dist_per_nvm_found[i]} != ${dist_per_nvm_expected[i]}") -eq 1 ]; then
            debug_log "nvm $i was assigned ${dist_per_nvm_found[i]} units when expected count was ${dist_per_nvm_expected[i]}"

            log_status_and_exit_ex "FAIL" "NVM Distribution in PCT mode - Test case failed because number of users alloted to NVM$i are not as expected"
        else
            # set compare_output to 1 when the result is okay.
            compare_output=1
        fi
    }
    
    
    #If compare_output is 1 after all comparisons then pass the test.
    if [ $compare_output -eq 1 ];then
        log_status_and_exit_ex "PASS" "NVM Distribution in PCT mode - Test case passed"
    fi
}

function handle_smoke_nvm_008_case(){
    number_of_unique_scripts=$(python /home/automation/workbench/automation/nscore/smoke/testcases/SmokeTest_NVM_Distribution/nvm_distributor.py ${NS_WDIR}/logs/tsr/${TEST_CYCLE_NUM}/${TSR_NUM}/SmokeTest_NVM_Distribution_results.csv 0)
    echo "number of unique scripts is $number_of_unique_scripts"
    
    #number_of_nvm_started=$(grep "NVM[0-9]" ${NS_WDIR}/logs/tsr/$(TEST_CYCLE_NUM)/${TSR_NUM}/logs/$(get_iteration_name)/test_run.report|awk '{print $1}'|sort|uniq|wc -l)
    number_of_nvm_started=$(grep "NVM[0-9]" ${NS_WDIR}/logs/tsr/${TEST_CYCLE_NUM}/${TSR_NUM}/logs/$(get_testcase_name)/test_run.report|awk '{print $1}'|sort|uniq|wc -l)
    echo "nvm actually started $number_of_nvm_started"
    
    if [ $number_of_unique_scripts -ne $number_of_nvm_started ];then
        log_status_and_exit_ex "FAIL" "NVM Distribution Mode 1 -- Number of nvms started was not found equal to number of unique scripts"
    fi

    #grp_wise_nvm_list=$(grep -A ${number_of_nvm_started} "Group=" ${NS_WDIR}/logs/tsr/$(TEST_CYCLE_NUM)/${TSR_NUM}/logs/$(get_iteration_name)/test_run.report|grep " Users=[1-9]"|awk '{print $1}'|cut -d ':' -f 1)
    grp_wise_nvm_list=$(grep -A ${number_of_nvm_started} "Group=" ${NS_WDIR}/logs/tsr/${TEST_CYCLE_NUM}/${TSR_NUM}/logs/$(get_testcase_name)/test_run.report|grep " Users=[1-9]"|awk '{print $1}'|cut -d ':' -f 1)
    echo "Group wise nvm found: $grp_wise_nvm_list"
    for line in $(python /home/automation/workbench/automation/nscore/smoke/testcases/SmokeTest_NVM_Distribution/nvm_distributor.py ${NS_WDIR}/logs/tsr/${TEST_CYCLE_NUM}/${TSR_NUM}/SmokeTest_NVM_Distribution_results.csv 1); do
        echo "Found is:$line"
        grp_nvms=()
        grp_indices=$(echo $line|cut -d '|' -f 2)
        for i in $(echo $grp_indices | sed "s/,/ /g")
        do
            grp_wise_nvm=$(echo $grp_wise_nvm_list|cut -d ' ' -f $(($i + 1)))
            grp_nvms=(${grp_nvms[@]} $grp_wise_nvm)
        done
        uniq_list_of_nvms=$(tr ' ' '\n' <<< "${grp_nvms[@]}" | sort -u | tr '\n' ' ')
        if [ ${#uniq_list_of_nvms[@]} -ne 1 ];then
            log_status_and_exit_ex "FAIL" "NVM Distribution Mode 1 -- Single nvm was not allotted to all groups with same script"
        fi
    done 
    log_status_and_exit_ex "PASS" "NVM Distribution Mode 1 -- Testcase passed"
}

function handle_smoke_nvm_009_case(){
    #number_of_nvm_started=$(grep "NVM[0-9]" ${NS_WDIR}/logs/tsr/$(TEST_CYCLE_NUM)/${TSR_NUM}/logs/$(get_iteration_name)/test_run.report|awk '{print $1}'|sort|uniq|wc -l)
    number_of_nvm_started=$(grep "NVM[0-9]" ${NS_WDIR}/logs/tsr/${TEST_CYCLE_NUM}/${TSR_NUM}/logs/$(get_testcase_name)/test_run.report|awk '{print $1}'|sort|uniq|wc -l)
    echo "nvm actually started $number_of_nvm_started"

    number_of_nvm_to_start=$(python /home/automation/workbench/automation/nscore/smoke/testcases/SmokeTest_NVM_Distribution/clustered_nvm_distributor.py ${NS_WDIR}/logs/tsr/${TEST_CYCLE_NUM}/${TSR_NUM}/SmokeTest_NVM_Distribution_results.csv 0)
    echo "number of unique scripts is $number_of_nvm_to_start"
 
    if [ $number_of_nvm_to_start -ne $number_of_nvm_started ];then
        log_status_and_exit_ex "FAIL" "NVM Distribution Mode 2 -- Number of nvms started was not found equal to number of unique scripts"
    fi

    #grp_wise_nvm_list=$(grep -A ${number_of_nvm_started} "Group=" ${NS_WDIR}/logs/tsr/$(TEST_CYCLE_NUM)/${TSR_NUM}/logs/$(get_iteration_name)/test_run.report|grep " Users=[1-9]"|awk '{print $1}'|cut -d ':' -f 1)
    grp_wise_nvm_list=$(grep -A ${number_of_nvm_started} "Group=" ${NS_WDIR}/logs/tsr/${TEST_CYCLE_NUM}/${TSR_NUM}/logs/$(get_testcase_name)/test_run.report|grep " Users=[1-9]"|awk '{print $1}'|cut -d ':' -f 1)
    echo "Group wise nvm found: $grp_wise_nvm_list"

    for line in $(python /home/automation/workbench/automation/nscore/smoke/testcases/SmokeTest_NVM_Distribution/clustered_nvm_distributor.py ${NS_WDIR}/logs/tsr/${TEST_CYCLE_NUM}/${TSR_NUM}/SmokeTest_NVM_Distribution_results.csv 1); do
        echo "Found is:$line"
        grp_nvms=()
        grp_indices=$(echo $line|cut -d '|' -f 2)
        echo "grp_indices=$grp_indices"
        for i in $(echo $grp_indices | sed "s/,/ /g")
        do
            grp_wise_nvm=$(echo $grp_wise_nvm_list|cut -d ' ' -f $(($i + 1)))
            grp_nvms=(${grp_nvms[@]} $grp_wise_nvm)
        done
        echo "grp_nvms=$grp_nvms"
        uniq_list_of_nvms=$(tr ' ' '\n' <<< "${grp_nvms[@]}" | sort -u | tr '\n' ' ')
        echo "uniq_list_of_nvms= $uniq_list_of_nvms"
        if [ ${#uniq_list_of_nvms[@]} -ne 1 ];then
            log_status_and_exit_ex "FAIL" "NVM Distribution Mode 2 -- Single nvm was not allotted to all groups with same script"
        fi
    done 
    log_status_and_exit_ex "PASS" "NVM Distribution Mode 2 -- Testcase passed"
}
# The following function checks if the number of users per nvm and number of nvm started are as expected or not and return 
#   0 - everything is correct
#   1 - number of nvm started are not correct
#   2-  number of user per nvm are not correct

function check_nvm_and_user(){
    nvm_filter=$1
#    TEST_RUN_REPORT="${NS_WDIR}/logs/tsr/$(TEST_CYCLE_NUM)/${TSR_NUM}/logs/$(get_iteration_name)/test_run.report"
    TEST_RUN_REPORT="${NS_WDIR}/logs/tsr/${TEST_CYCLE_NUM}/${TSR_NUM}/logs/$(get_testcase_name)/test_run.report"
    echo "$TEST_RUN_REPORT" 

    #Checking number of nvm expected to start
    nvm_to_start=$(cut -d ',' -f 18 $NS_WDIR/logs/tsr/${TEST_CYCLE_NUM}/${TSR_NUM}/SmokeTest_NVM_Distribution_results.csv |tail -1)
 
    #Checking number of users in the test
    dist_unit_count=$(cut -d ',' -f 5 $NS_WDIR/logs/tsr/${TEST_CYCLE_NUM}/${TSR_NUM}/SmokeTest_NVM_Distribution_results.csv | tail -1)
 
    if [ $nvm_to_start -ge $dist_unit_count ];then
        if [ $scenario_type -eq 0 ];then
            nvm_to_start=$dist_unit_count
        fi
    fi
    debug_log "expected num of nvm to start $nvm_to_start"
   
    #Checking number of nvm started by the test
    nvm_count=$(grep 'NVM' $TEST_RUN_REPORT|tail -n +2| wc -l)

    #Comparing number of nvm started to the expected one and return 1 if the values do not match.
    if [ $nvm_to_start -ne $nvm_count ];then
        return 1
    fi

    #call assigner to get expected number of user per nvm as per number of users and nvms in case of FCU.
    if [ $scenario_type -eq 0 ];then
        assigner $nvm_count $dist_unit_count
    #call session assigner to get expected number of sessions per nvm as per session rate and nvms in case of FSR.
    elif [ $scenario_type -eq 1 ];then
        session_assigner $nvm_count $dist_unit_count
    fi

    for((i=0;i<$nvm_count;i++)){
        compare_output=0
        #Getting the number of users assigned to each nvm in test.
        dist_per_nvm_found[$i]=$(egrep "NVM${i}" $TEST_RUN_REPORT|cut -d',' -f1|sed "s/${nvm_filter}//"|awk '{print $2}');
        debug_log "NVM $i found:- ${dist_per_nvm_found[i]}"
        debug_log "NVM $i expected:- ${dist_per_nvm_expected[i]}"
      
        #Comparing expected number of users and nvms to real ones and return 2 if the value do not match.
        if [ $(bc -l <<< "${dist_per_nvm_found[i]} != ${dist_per_nvm_expected[i]}") -eq 1 ]; then
            debug_log "nvm $i was assigned ${dist_per_nvm_found[i]} units when expected count was ${dist_per_nvm_expected[i]}"
            return 2
        else 
            compare_output=1
        fi
    }
  
    #return 0 if everything goes fine
    if [ $compare_output -eq 1 ];then
        return 0
    fi

}


#The following function checks the expected number of users to be assigned to each nvm

user_assigner=1
function assigner(){
    nvm=$1
    users=$2

    #Distributes 1 user to each nvm in a loop until users are completely distributed
    for((i=0; i<$nvm; i++)){
        dist_per_nvm_expected[$i]=$user_assigner
        users=$(($users-1))

        if [ $users -eq 0 ];then
            export dist_per_nvm_expected
            break;
        fi
        if [ $i -eq $(($nvm-1)) ];then
            user_assigner=$(($user_assigner+1))
            assigner $nvm $users
        fi
    } 
}

#The following function checks the expected number of sessions to be assigned to each nvm

function session_assigner(){
    nvm=$1
    session_rate=$2

    #Calculates the session count per nvm 
    for((i=0; i<$nvm; i++)){
        dist_per_nvm_expected[$i]=$(printf '%.3f\n' "$(echo "scale=3;$session_rate/$nvm" | bc)")
        echo "Distribution to nvm $i is ${dist_per_nvm_expected[i]}"
    }
    export dist_per_nvm_expected
}

# Call to main function
# Do not override it

main
