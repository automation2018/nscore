#!/usr/bin/env bash
# Generated by: needle
#    Date Time: 11/25/16 07:56:24 AM
#  Description: Check status to validate cases for smoke
# 
# Conventions
#   1. Two(2) space indentation. No tabs
#   2. Variables and function starts with snake_case
#		3. Constants are declared with ALL_CAPS

# Source out required files
source $NS_WDIR/lib/automation_util

# Default Constants
PATH_TO_TEST_RUN="$NS_WDIR/logs/TR$(get_testidx)"
#PARTITION_PATH="${PATH_TO_TEST_RUN}/$(get_test_partition)"
PROGRESS_REPORT_FILE="${PATH_TO_TEST_RUN}/progress.report"
SUMMARY_GDF_FILE="${PATH_TO_TEST_RUN}/summary_gdf.data"
#EVENT_LOG_FILE="${PARTITION_PATH}/event.log"
#MONITOR_LOG_FILE="${PARTITION_PATH}/monitor.log"
GLOBAL_DAT_FILE="${PATH_TO_TEST_RUN}/global.dat"

# Entry point to check status
# Add cases to handle your validation
function main() {
	case $(get_tname) in
    "SMOKE-055-001") handle_fsr_grp_1_case ;;
    "SMOKE-055-002") handle_fsr_grp_2_case ;;
    "SMOKE-055-003") handle_fsr_grp_3_case ;;
    "SMOKE-055-004") handle_fsr_grp_4_case ;;
    "SMOKE-055-005") handle_fsr_grp_5_case ;;
    "SMOKE-055-006") handle_fsr_grp_6_case ;;
    "SMOKE-055-007") handle_fsr_grp_7_case ;;
    "SMOKE-055-008") handle_fsr_grp_8_case ;;

# End case def
		*) handle_unknown_case ;;
		?) handle_unknown_case ;;
  esac
}

# Helper function to log status
# Sets additional product id and
# category id

function handle_unknown_case() {
	log_status_and_exit_ex "FAIL" "Testcase name not found"
}

# TODO: 
# 1. Add logic to validate case FSR_GRP_1
# 2. Depending upon evaluation update the status with your own description
function handle_fsr_grp_1_case() {
    output=$(handle_all_cases)
    if [ $output -eq 0 ];then
        log_status_and_exit_ex "PASS" "FSR Group based scheduling - NUM mode test case with simultaneous rampup and rampdown settings passed"
    elif [ $output -eq 1 ];then
        log_status_and_exit_ex "FAIL" "FSR Group based scheduling - NUM mode test case with simultaneous rampup and rampdown settings failed because phase timings obtained are not as expected"
    elif [ $output -eq 2 ];then
        log_status_and_exit_ex "FAIL" "FSR Group based scheduling - NUM mode Test case failed because no. of steps taken didnt match expected count"
    fi
}
function handle_fsr_grp_2_case() {
    output=$(handle_all_cases)
    if [ $output -eq 0 ];then
        log_status_and_exit_ex "PASS" "FSR Group based scheduling - NUM mode test case with mode 0 rampup and rampdown settings passed"
    elif [ $output -eq 1 ];then
        log_status_and_exit_ex "FAIL" "FSR Group based scheduling - NUM mode test case with mode 0 rampup and rampdown settings failed because phase timings obtained are not as expected"
    elif [ $output -eq 2 ];then
        log_status_and_exit_ex "FAIL" "FSR Group based scheduling - NUM mode Test case failed because no. of steps taken didnt match expected count"
    fi

}

function handle_fsr_grp_3_case() {
    output=$(handle_all_cases)
    
    if [ $output -eq 0 ];then
        log_status_and_exit_ex "PASS" "FSR Group based scheduling - NUM mode test case with mode 1 rampup and rampdown settings passed"
    elif [ $output -eq 1 ];then
        log_status_and_exit_ex "FAIL" "FSR Group based scheduling - NUM mode test case with mode 1 rampup and rampdown settings failed because phase timings obtained are not as expected"
    elif [ $output -eq 2 ];then
        log_status_and_exit_ex "FAIL" "FSR Group based scheduling - NUM mode Test case failed because no. of steps taken didnt match expected count"
    fi

}
function handle_fsr_grp_4_case() {
    output=$(handle_all_cases)

    echo "Output obtained $output"
    if [ $output -eq 0 ];then
        log_status_and_exit_ex "PASS" "FSR Group based scheduling - NUM mode test case with mode 2 rampup and rampdown settings passed"
    elif [ $output -eq 1 ];then
        log_status_and_exit_ex "FAIL" "FSR Group based scheduling - NUM mode test case with mode 2 rampup and rampdown settings failed because phase timings obtained are not as expected"
    elif [ $output -eq 2 ];then
        log_status_and_exit_ex "FAIL" "FSR Group based scheduling - NUM mode Test case failed because no. of steps taken didnt match expected count"
    fi

}

function handle_fsr_grp_5_case() {
    output=$(handle_all_cases)
    if [ $output -eq 0 ];then
        log_status_and_exit_ex "PASS" "FSR Group based scheduling - PCT mode test case with simultaneous rampup and rampdown settings passed"
    elif [ $output -eq 1 ];then
        log_status_and_exit_ex "FAIL" "FSR Group based scheduling - PCT mode test case with simultaneous rampup and rampdown settings failed because phase timings obtained are not as expected"
    elif [ $output -eq 2 ];then
        log_status_and_exit_ex "FAIL" "FSR Group based scheduling - PCT mode Test case failed because no. of steps taken didnt match expected count"
    fi
}
function handle_fsr_grp_6_case() {
    output=$(handle_all_cases)
    echo "Output Obtained $output"
    if [ $output -eq 0 ];then
        log_status_and_exit_ex "PASS" "FSR Group based scheduling - PCT mode test case with mode 0 rampup and rampdown settings passed"
    elif [ $output -eq 1 ];then
        log_status_and_exit_ex "FAIL" "FSR Group based scheduling - PCT mode test case with mode 0 rampup and rampdown settings failed because phase timings obtained are not as expected"
    elif [ $output -eq 2 ];then
        log_status_and_exit_ex "FAIL" "FSR Group based scheduling - PCT mode Test case failed because no. of steps taken didnt match expected count"
    fi

}

function handle_fsr_grp_7_case() {
    output=$(handle_all_cases)
    
    if [ $output -eq 0 ];then
        log_status_and_exit_ex "PASS" "FSR Group based scheduling - PCT mode test case with mode 1 rampup and rampdown settings passed"
    elif [ $output -eq 1 ];then
        log_status_and_exit_ex "FAIL" "FSR Group based scheduling - PCT mode test case with mode 1 rampup and rampdown settings failed because phase timings obtained are not as expected"
    elif [ $output -eq 2 ];then
        log_status_and_exit_ex "FAIL" "FSR Group based scheduling - PCT mode Test case failed because no. of steps taken didnt match expected count"
    fi

}
function handle_fsr_grp_8_case() {
    output=$(handle_all_cases)

    echo "Output obtained $output"
    if [ $output -eq 0 ];then
        log_status_and_exit_ex "PASS" "FSR Group based scheduling - PCT mode test case with mode 2 rampup and rampdown settings passed"
    elif [ $output -eq 1 ];then
        log_status_and_exit_ex "FAIL" "FSR Group based scheduling - PCT mode test case with mode 2 rampup and rampdown settings failed because phase timings obtained are not as expected"
    elif [ $output -eq 2 ];then
        log_status_and_exit_ex "FAIL" "FSR Group based scheduling - PCT mode Test case failed because no. of steps taken didnt match expected count"
    fi

}

function handle_all_cases(){
  rs=3
  RESULTS_CSV="$NS_WDIR/logs/tsr/${TEST_CYCLE_NUM}/${TSR_NUM}/SmokeTest_FSR_GRP_results.csv"
  grp1_ramp_up_sequence=$(tail -1 $RESULTS_CSV |cut -d ',' -f 11)
  grp2_ramp_up_sequence=$(tail -1 $RESULTS_CSV |cut -d ',' -f 12)
  grp1_ramp_down_sequence=$(tail -1 $RESULTS_CSV |cut -d ',' -f 15)
  grp2_ramp_down_sequence=$(tail -1 $RESULTS_CSV |cut -d ',' -f 16)

  grp1_name=$(tail -1 $RESULTS_CSV |cut -d ',' -f 5)
  grp2_name=$(tail -1 $RESULTS_CSV |cut -d ',' -f 6)

  grp1_ramp_up=$(get_expected_num_of_steps "$grp1_ramp_up_sequence")
  grp2_ramp_up=$(get_expected_num_of_steps "$grp2_ramp_up_sequence")
  grp1_ramp_down=$(get_expected_num_of_steps "$grp1_ramp_down_sequence")
  grp2_ramp_down=$(get_expected_num_of_steps "$grp2_ramp_down_sequence")

  debug_log "Check 1 $grp1_ramp_up, $grp2_ramp_up, $grp1_ramp_down, $grp2_ramp_down"

  grp1_ramp_up_steps_found=$(($(grep "RAMPING UP" ${PROGRESS_REPORT_FILE}| grep ${grp1_name}| wc -l)+1))
  grp2_ramp_up_steps_found=$(($(grep "RAMPING UP" ${PROGRESS_REPORT_FILE}| grep ${grp2_name}| wc -l)+1))
  grp1_ramp_down_steps_found=$(($(grep "RAMPING DOWN" ${PROGRESS_REPORT_FILE}| grep ${grp1_name}| wc -l)+1))
  grp2_ramp_down_steps_found=$(($(grep "RAMPING DOWN" ${PROGRESS_REPORT_FILE}| grep ${grp2_name}| wc -l)+1))

  debug_log "Check 2 $grp1_ramp_up_steps_found , $grp1_ramp_down_steps_found, $grp2_ramp_up_steps_found, $grp2_ramp_down_steps_found"

  if [ $grp1_ramp_up -ne $grp1_ramp_up_steps_found ] || [ $grp2_ramp_up -ne $grp2_ramp_up_steps_found ] || [ $grp1_ramp_down -ne $grp1_ramp_down_steps_found ] || [ $grp2_ramp_down -ne $grp2_ramp_down_steps_found ];then
      rs=2
  fi

  grp1_schedule=$(python /home/automation/workbench/automation/nscore/smoke/testcases/SmokeTest_FSR_GRP/get_group_phase_estimation.py $RESULTS_CSV $grp1_name 0)
  grp2_schedule=$(python /home/automation/workbench/automation/nscore/smoke/testcases/SmokeTest_FSR_GRP/get_group_phase_estimation.py $RESULTS_CSV $grp2_name 0)
  IFS=" " read -r -a grp1_timings <<< $grp1_schedule
  IFS=" " read -r -a grp2_timings <<< $grp2_schedule
  debug_log "GRP 1 entries:${grp1_timings[@]}"
  debug_log "GRP 2 entries:${grp2_timings[@]}"

  grp1_phase_timings_found[0]=$(grep "PHASE_START_TIME START ${grp1_name}Start" ${GLOBAL_DAT_FILE}|awk '{print $4}')
  grp1_phase_timings_found[1]=$(grep "PHASE_END_TIME START ${grp1_name}Start" ${GLOBAL_DAT_FILE}|awk '{print $4}')
  grp1_phase_timings_found[2]=$(grep "PHASE_START_TIME RAMP_UP ${grp1_name}RampUp" ${GLOBAL_DAT_FILE}|awk '{print $4}')
  grp1_phase_timings_found[3]=$(grep "PHASE_END_TIME RAMP_UP ${grp1_name}RampUp" ${GLOBAL_DAT_FILE}|awk '{print $4}')
  grp1_phase_timings_found[4]=$(grep "PHASE_START_TIME DURATION ${grp1_name}Duration" ${GLOBAL_DAT_FILE}|awk '{print $4}')
  grp1_phase_timings_found[5]=$(grep "PHASE_END_TIME DURATION ${grp1_name}Duration" ${GLOBAL_DAT_FILE}|awk '{print $4}')
  grp1_phase_timings_found[6]=$(grep "PHASE_START_TIME RAMP_DOWN ${grp1_name}RampDown" ${GLOBAL_DAT_FILE}|awk '{print $4}')
  grp1_phase_timings_found[7]=$(grep "PHASE_END_TIME RAMP_DOWN ${grp1_name}RampDown" ${GLOBAL_DAT_FILE}|awk '{print $4}')
  debug_log "GRP 1 entries found:${grp1_phase_timings_found[@]}"

  grp2_phase_timings_found[0]=$(grep "PHASE_START_TIME START ${grp2_name}Start" ${GLOBAL_DAT_FILE}|awk '{print $4}')
  grp2_phase_timings_found[1]=$(grep "PHASE_END_TIME START ${grp2_name}Start" ${GLOBAL_DAT_FILE}|awk '{print $4}')
  grp2_phase_timings_found[2]=$(grep "PHASE_START_TIME RAMP_UP ${grp2_name}RampUp" ${GLOBAL_DAT_FILE}|awk '{print $4}')
  grp2_phase_timings_found[3]=$(grep "PHASE_END_TIME RAMP_UP ${grp2_name}RampUp" ${GLOBAL_DAT_FILE}|awk '{print $4}')
  grp2_phase_timings_found[4]=$(grep "PHASE_START_TIME DURATION ${grp2_name}Duration" ${GLOBAL_DAT_FILE}|awk '{print $4}')
  grp2_phase_timings_found[5]=$(grep "PHASE_END_TIME DURATION ${grp2_name}Duration" ${GLOBAL_DAT_FILE}|awk '{print $4}')
  grp2_phase_timings_found[6]=$(grep "PHASE_START_TIME RAMP_DOWN ${grp2_name}RampDown" ${GLOBAL_DAT_FILE}|awk '{print $4}')
  grp2_phase_timings_found[7]=$(grep "PHASE_END_TIME RAMP_DOWN ${grp2_name}RampDown" ${GLOBAL_DAT_FILE}|awk '{print $4}')
  debug_log "GRP 2 entries found:${grp2_phase_timings_found[@]}"

  for((i=0; i<=7; i++)){
      debug_log "Check: ${grp1_phase_timings_found[i]} and ${grp1_timings[i]}"
      if [ ${grp1_phase_timings_found[i]} != ${grp1_timings[i]} ];then
          found_timing_in_sec=$(echo ${grp1_phase_timings_found[i]} | awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }')
          expected_timing_in_sec=$(echo ${grp1_timings[i]} | awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }')
          diff=$(($found_timing_in_sec-$expected_timing_in_sec))
          diff_pct=$(($diff*100/$expected_timing_in_sec))
          debug_log "diff_pct found: $diff_pct"
          if [ $diff_pct -lt -50 ] || [ $diff_pct -gt 50 ];then
              rs=1
#              log_status_and_exit_ex "FAIL" "Test case failed because found and expected values for group 1 variable $i do not match"
              debug_log "Difference out of range accepted thus rs is $rs"
          fi
      elif [ $rs -eq 3 ];then
          rs=0
          debug_log "Accepted $rs"
      fi
     
      debug_log "Check: ${grp2_phase_timings_found[i]} and ${grp2_timings[i]}"
      if [ ${grp2_phase_timings_found[i]} != ${grp2_timings[i]} ];then
          found_timing_in_sec=$(echo ${grp2_phase_timings_found[i]} | awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }')
          expected_timing_in_sec=$(echo ${grp2_timings[i]} | awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }')
          diff=$(($found_timing_in_sec-$expected_timing_in_sec))
          diff_pct=$(($diff*100/$expected_timing_in_sec))
          debug_log "diff_pct found: $diff_pct"
          if [ $diff_pct -lt -50 ] || [ $diff_pct -gt 50 ];then
              rs=1
              debug_log "Difference out of range accepted thus rs is $rs"
#              log_status_and_exit_ex "FAIL" "Test case failed because found and expected values for group 2 variable $i do not match"
          fi
      elif [ $rs -eq 3 ];then
          rs=0
          debug_log "Accepted $rs"
      fi
  }

  echo $rs
#  log_status_and_exit_ex "PASS" "Testcase passed"
}

function get_expected_num_of_steps(){
    target_sequence="$1"
    debug_log "Target is $target_sequence"
    if [ $(echo ${target_sequence}|cut -d ' ' -f 4) == "IMMEDIATELY" ];then
        steps=1
    elif [ $(echo ${target_sequence}|cut -d ' ' -f 4) == "TIME_SESSIONS" ];then
        num_of_seconds=$(echo $(echo $target_sequence|cut -d ' ' -f 5) | awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }')
        if [ $(echo ${target_sequence}|cut -d ' ' -f 6) -eq 0 ];then
            if [ $num_of_seconds -le 60 ];then
                steps=2
            else
                steps=$((${num_of_seconds}/60))
            fi
        elif [ $(echo ${target_sequence}|cut -d ' ' -f 6) -eq 1 ];then
            steps=$((${num_of_seconds}/$(echo ${target_sequence}|cut -d ' ' -f 7)))
        elif [ $(echo ${target_sequence}|cut -d ' ' -f 6) -eq 2 ];then
            steps=$(echo ${target_sequence}|cut -d ' ' -f 7)
        fi
    fi
    echo $steps
}

# Call to main function
# Do not override it
main
