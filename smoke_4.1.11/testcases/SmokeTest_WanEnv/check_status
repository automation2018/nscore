#!/usr/bin/env bash

source $NS_WDIR/lib/automation_util

S_FILE="$NS_WDIR/logs/TR${T_RUN_ID}/scenario"
SUM_GDF_FILE="$NS_WDIR/logs/TR${T_RUN_ID}/summary_gdf.data"


function main(){
    case $(get_tname) in
        "SMOKE-023-001") validate_wan_download_speed_results ;; 
        "SMOKE-023-002") validate_wan_download_speed_results ;; 
        "SMOKE-023-003") validate_wan_download_speed_results ;; 
        "SMOKE-023-004") validate_wan_download_speed_results ;; 
        "SMOKE-023-005") validate_wan_upload_speed_results ;; 
        "SMOKE-023-006") validate_wan_upload_speed_results ;; 
        "SMOKE-023-007") validate_wan_upload_speed_results ;; 
        "SMOKE-023-008") validate_wan_upload_speed_results ;; 
         *) handle_unknown_case ;;
         ?) handle_unknown_case ;;
    esac
}


function handle_unknown_case(){
    log_status_and_exit_ex "FAIL" "testcase not found"
}


function validate_wan_download_speed_results(){
    if [ $SD_TotalSuccURL -eq 1 ]; then
		response_file_size=$(stat --format %s ${T_ID_REQ_PATH}/url_rep_body_0_0_0_0_0_0_0_0_0.dat)
		response_file_size=$((response_file_size * 8))
		download_speed=$(grep "^UACCESS" ${S_FILE} | cut -d' ' -f4 )

		# Get integer part of both the time values
		average_response_time=$(grep 'Average Session Response Time' ${SUM_GDF_FILE} | awk -F'|' '{print $(NF-2)}') 
		expected_response_time=$(python -c "print '%.3f' %(1.0 * $response_file_size / $download_speed)")

		debug_log "response_file_size=$response_file_size;download_speed=$download_speed"
		debug_log "average_response_time=$average_response_time;expected_response_time=$expected_response_time"

		diff=$(bc -l <<< "$expected_response_time - $average_response_time")
		diff=${diff/#-/}

		if [ $(bc -l <<< "$diff <= 1.2") -eq 1 ]; then
			log_status_and_exit_ex "PASS" "wan download speed($download_speed bps) testcase passed as difference of expected response time($expected_response_time) and actual response time($average_response_time) is less than or equals to 1.2"
		else
			log_status_and_exit_ex "FAIL" "wan download speed($download_speed bps) testcase failed as difference of expected response time($expected_response_time) and actual response time($average_response_time) is greater than or equals to 1.2"
		fi
	else
	    log_status_and_exit_ex "FAIL" "wan testcase for download time failed due to url failure"
	fi
}


function validate_wan_upload_speed_results(){
    if [ $SD_TotalSuccURL -eq 1 ]; then
		response_file_size=$(stat --format %s ${T_ID_REQ_PATH}/url_req_0_0_0_0_0_0_0_0_0.dat)
		response_file_size=$((response_file_size * 8))
		upload_speed=$(grep "^UACCESS" ${S_FILE} | cut -d' ' -f3)

		# Get integer part of both the time values
		average_response_time=$(grep 'Average Session Response Time' ${SUM_GDF_FILE} | awk -F'|' '{print $(NF-2)}') 
		expected_response_time=$(python -c "print '%.3f' %(1.0 * $response_file_size / $upload_speed)")

		debug_log "response_file_size=$response_file_size;upload_speed=$upload_speed"
		debug_log "average_response_time=$average_response_time;expected_response_time=$expected_response_time"

		diff=$(bc -l <<< "$expected_response_time - $average_response_time")
		diff=${diff/#-/}

		if [ $(bc -l <<< "$diff <= 1.2") -eq 1 ]; then
			log_status_and_exit_ex "PASS" "wan upload speed($upload_speed bps) testcase passed as difference of expected response time($expected_response_time) and actual response time($average_response_time) is less than or equals to 1.2"
		else
			log_status_and_exit_ex "FAIL" "wan upload speed($upload_speed bps) testcase failed as difference of expected response time($expected_response_time) and actual response time($average_response_time) is greater than or equals to 1.2"
		fi
	else
	    log_status_and_exit_ex "FAIL" "wan testcase for upload speed failed due to url failure"
	fi
}


main


exit 0
